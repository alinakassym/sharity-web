import type { FC } from "react";

interface VuesaxIconProps {
  name: keyof typeof icons;
  size?: number;
  color?: string; // для fill-иконок
  stroke?: string; // для stroke-иконок
  strokeWidth?: number; // опционально
  className?: string;
}

// параметры, которые пробрасываем в конкретные иконки
type IconRenderProps = {
  color: string;
  stroke?: string;
  strokeWidth?: number;
};

type IconDef = {
  viewBox: string;
  paths: (p: IconRenderProps) => React.ReactNode;
};

const icons: Record<string, IconDef> = {
  location: {
    viewBox: "0 0 24 24",
    paths: () => (
      <>
        <path d="M12 14.1699C9.87 14.1699 8.13 12.4399 8.13 10.2999C8.13 8.15994 9.87 6.43994 12 6.43994C14.13 6.43994 15.87 8.16994 15.87 10.3099C15.87 12.4499 14.13 14.1699 12 14.1699ZM12 7.93994C10.7 7.93994 9.63 8.99994 9.63 10.3099C9.63 11.6199 10.69 12.6799 12 12.6799C13.31 12.6799 14.37 11.6199 14.37 10.3099C14.37 8.99994 13.3 7.93994 12 7.93994Z" />
        <path d="M12.0001 22.76C10.5201 22.76 9.03005 22.2 7.87005 21.09C4.92005 18.25 1.66005 13.72 2.89005 8.33C4.00005 3.44 8.27005 1.25 12.0001 1.25C12.0001 1.25 12.0001 1.25 12.0101 1.25C15.7401 1.25 20.0101 3.44 21.1201 8.34C22.3401 13.73 19.0801 18.25 16.1301 21.09C14.9701 22.2 13.4801 22.76 12.0001 22.76ZM12.0001 2.75C9.09005 2.75 5.35005 4.3 4.36005 8.66C3.28005 13.37 6.24005 17.43 8.92005 20C10.6501 21.67 13.3601 21.67 15.0901 20C17.7601 17.43 20.7201 13.37 19.6601 8.66C18.6601 4.3 14.9101 2.75 12.0001 2.75Z" />
      </>
    ),
  },
  shop: {
    viewBox: "0 0 24 24",
    paths: () => <>{/* ...твои path, они унаследуют fill от <svg> */}</>,
  },
  search: {
    viewBox: "0 0 24 24",
    paths: () => <>{/* ... */}</>,
  },
  gymnastics: {
    viewBox: "0 0 24 24",
    paths: ({ stroke, strokeWidth }) => (
      <path
        d="M11.7379 9.5C6.5 10 6.00012 9.5 6.99986 21.5H8.99986M21.5 11C13.5 11.5 8.02498 8.57494 6 2.5M14.4996 11C4.99948 17.5 2.49978 9 2.99983 8.5C3.49988 8 7.5 5.5 9.5 2.5M18 6.5C18 7.60457 17.1046 8.5 16 8.5C14.8954 8.5 14 7.60457 14 6.5C14 5.39543 14.8954 4.5 16 4.5C17.1046 4.5 18 5.39543 18 6.5Z"
        stroke={stroke ?? "currentColor"}
        strokeWidth={strokeWidth ?? 1.5}
        fill="none"
      />
    ),
  },
  dance: {
    viewBox: "0 0 24 24",
    paths: ({ stroke, strokeWidth }) => (
      <path
        d="M9.96296 2.04739C13.5 2.99953 15 4.99953 15 7.49953M11.9692 12.5C12.5 15 13.0769 20.5 2 20.5M14.5 10C15.5 12 15 15.5 15 15.5M12.5 15.5C20 15.5 27.5 19.5 16.5 20.5M9.96296 2.0469C13.5 2.99905 15 4.99905 15 7.49905C15 9.99905 12 14.4995 4 14.999M12 7.5C12 8.60457 11.1046 9.5 10 9.5C8.89543 9.5 8 8.60457 8 7.5C8 6.39543 8.89543 5.5 10 5.5C11.1046 5.5 12 6.39543 12 7.5Z"
        stroke={stroke ?? "currentColor"}
        strokeWidth={strokeWidth ?? 1.5}
        stroke-linecap="round"
        stroke-linejoin="round"
        fill="none"
      />
    ),
  },
  ballet: {
    viewBox: "0 0 24 24",
    paths: ({ stroke, strokeWidth, color }) => (
      <>
        <path
          d="M12.416 1.91016C12.6957 1.91016 12.9229 2.13729 12.9229 2.41699C12.9228 4.08044 12.1451 6.35526 10.458 7.63379C10.4944 7.86593 10.5626 8.23411 10.6758 8.66113L11.1572 8.50098C11.9383 8.23977 12.7516 7.96747 14.0107 7.78711H14.0156C15.0061 7.69485 15.8362 7.7573 16.4746 7.96973C17.1144 8.18268 17.5672 8.54853 17.7861 9.06445C18.1 9.80446 17.8488 10.6892 17.2041 11.5908L21.4756 10.6719L21.5781 10.6602C21.7648 10.6571 21.9323 10.7596 22.0215 10.9189L22.0439 10.8975L22.0791 11.0596C22.1377 11.3331 21.9629 11.6024 21.6895 11.6611L16.0273 12.8799C14.9506 13.8516 13.4673 14.8058 11.6982 15.6035C11.2709 15.7964 10.845 15.9649 10.4238 16.1211V21.583C10.4238 21.8627 10.1967 22.0898 9.91699 22.0898C9.63734 22.0898 9.41016 21.8627 9.41016 21.583V16.4658C8.09325 16.8702 6.84875 17.0889 5.80371 17.0889C5.12628 17.0888 4.52786 17.0001 4.0459 16.8115C3.47719 16.589 3.08057 16.2382 2.87988 15.7656C2.59086 15.0844 2.77619 14.2755 3.33105 13.4365C3.87653 12.612 4.78837 11.7426 6.00293 10.9033C5.35588 9.83062 4.82535 8.66227 4.4707 7.67578C2.87482 5.83588 1.9103 3.87661 1.91016 2.41699C1.91016 2.13729 2.13729 1.91016 2.41699 1.91016C2.69653 1.91034 2.92285 2.13741 2.92285 2.41699C2.92293 2.99577 3.13404 3.71643 3.52344 4.50098C3.90728 5.2743 4.46189 6.10343 5.14844 6.91016H9.74414C11.1582 5.9111 11.9091 3.91721 11.9092 2.41699C11.9092 2.13733 12.1364 1.91022 12.416 1.91016ZM15.9785 8.87305C15.5095 8.75264 14.8813 8.71955 14.1338 8.79102C12.9861 8.95564 12.2224 9.21211 11.4785 9.46094L10.9922 9.62207C11.1904 10.1348 11.4465 10.6558 11.7939 11.0967C12.037 11.4065 12.1379 11.8046 12.0674 12.1904C12.0012 12.557 11.7812 12.8763 11.4648 13.0674L11.4658 13.0684C11.1167 13.28 10.7681 13.4521 10.4316 13.5801C10.1157 13.6997 9.79042 13.7588 9.46777 13.7588C8.77768 13.7587 8.10715 13.4906 7.58887 12.9854C7.22411 12.6294 6.87957 12.2059 6.55664 11.751C5.47341 12.504 4.71636 13.2409 4.26562 13.876C4.03521 14.2007 3.88625 14.4965 3.81348 14.751C3.74061 15.0059 3.74536 15.2133 3.81152 15.3691C3.89695 15.5711 4.09197 15.7414 4.41406 15.8672C5.07881 16.1281 6.10098 16.1469 7.31152 15.9395C8.50316 15.7352 9.86544 15.3126 11.2275 14.7031L11.2812 14.6787C13.2223 13.8027 14.7352 12.7523 15.7021 11.7861C16.1859 11.3027 16.5304 10.8434 16.7246 10.4404C16.9199 10.0353 16.9567 9.70137 16.8535 9.45801H16.8525C16.7432 9.2 16.4511 8.99445 15.9785 8.87305ZM5.64355 7.92285C6.50381 10.4784 7.90923 11.8839 8.2959 12.2617L8.3877 12.3447C8.85748 12.7426 9.49152 12.8541 10.0723 12.6338C10.3504 12.5285 10.6429 12.3841 10.9404 12.2041L10.998 12.1572C11.0449 12.1072 11.0632 12.0489 11.0703 12.0107V12.0098C11.0886 11.9113 11.0625 11.8075 10.998 11.7256C9.9988 10.456 9.61096 8.73074 9.47656 7.92285H5.64355ZM7.41602 1.91016C8.61389 1.91016 9.58967 2.88512 9.58984 4.08301C9.58984 5.28104 8.614 6.25684 7.41602 6.25684C6.2182 6.25664 5.24316 5.28092 5.24316 4.08301C5.24334 2.88525 6.21831 1.91036 7.41602 1.91016ZM7.41602 2.92285C6.77687 2.92305 6.25701 3.44381 6.25684 4.08301C6.25684 4.72235 6.77676 5.24296 7.41602 5.24316C8.05544 5.24316 8.57617 4.72247 8.57617 4.08301C8.576 3.44369 8.05533 2.92285 7.41602 2.92285Z"
          fill={color ?? "currentColor"}
          stroke={stroke ?? "currentColor"}
          strokeWidth={strokeWidth ?? 0.4}
        />
      </>
    ),
  },
  volleyball: {
    viewBox: "0 0 24 24",
    paths: ({ color }) => (
      <>
        <path
          d="M16.8247 14.1881C15.501 17.4337 12.9975 19.9738 9.39847 21.3425C9.24701 21.4001 9.25817 21.6175 9.41472 21.6594C13.9293 22.8662 18.6245 20.7818 20.8052 16.7398C20.8793 16.6025 20.8471 16.4319 20.729 16.3299C19.7591 15.4937 18.6169 14.6922 17.2842 14.0148C17.1102 13.9264 16.8984 14.0073 16.8247 14.1881Z"
          fill={color ?? "currentColor"}
        />
        <path
          d="M16.0482 13.4474C14.8604 12.9588 13.6157 12.6038 12.3335 12.3878C12.2145 12.3678 12.0946 12.4154 12.0189 12.5094C10.0982 14.8961 7.52369 16.7596 4.40497 17.7939C4.18298 17.8675 4.10629 18.1414 4.25455 18.3223C5.18462 19.4574 6.38688 20.4216 7.80038 21.0762C7.87303 21.1098 7.95596 21.1157 8.03278 21.0932C12.0749 19.9092 14.8405 17.3371 16.2312 13.8791C16.2993 13.7098 16.217 13.5168 16.0482 13.4474Z"
          fill={color ?? "currentColor"}
        />
        <path
          d="M21.3924 15.4335C21.8935 14.061 22.086 12.5877 21.9583 11.1169C21.9514 11.0376 21.9158 10.9632 21.8587 10.9077C18.8521 7.98704 15.1891 6.85802 11.5011 7.39089C11.322 7.41676 11.1967 7.58243 11.219 7.7621C11.3786 9.04521 11.6965 10.3046 12.1675 11.5204C12.21 11.6301 12.3083 11.7078 12.4243 11.7272C15.4551 12.2344 18.3527 13.4971 20.8674 15.5751C21.0445 15.7214 21.3137 15.6492 21.3924 15.4335Z"
          fill={color ?? "currentColor"}
        />
        <path
          d="M8.72146 14.7902C9.74984 14.0131 10.6803 13.1104 11.4976 12.0955C11.5723 12.0027 11.5899 11.8767 11.5468 11.7656C10.4324 8.89138 10.1169 5.72096 10.7706 2.5223C10.8169 2.29577 10.622 2.09094 10.3937 2.12756C8.89283 2.36829 7.47758 2.94603 6.23809 3.82349C6.17343 3.86927 6.12732 3.9373 6.10824 4.01419C5.09157 8.10719 5.97652 11.8304 8.25898 14.7313C8.37091 14.8735 8.57703 14.8992 8.72146 14.7902Z"
          fill={color ?? "currentColor"}
        />
        <path
          d="M11.5092 2.26099C11.1956 3.62312 11.0596 5.02196 11.1096 6.40389C11.1167 6.60109 11.2944 6.74689 11.4898 6.71989C14.9618 6.24042 18.4302 7.156 21.3977 9.60201C21.5222 9.70461 21.7065 9.58843 21.6653 9.43246C20.5316 5.13631 16.5768 1.92132 11.8281 2.00147C11.6749 2.00405 11.5435 2.11169 11.5092 2.26099Z"
          fill={color ?? "currentColor"}
        />
        <path
          d="M7.68307 15.0761C5.49626 12.2608 4.60376 8.79485 5.21124 5.07261C5.23736 4.91248 5.04353 4.81317 4.92876 4.92781C1.57352 8.27939 1.14404 13.3536 3.42004 17.1388C3.49898 17.2701 3.65744 17.3304 3.80395 17.2859C5.14501 16.8782 6.42387 16.299 7.59922 15.5633C7.76647 15.4586 7.80413 15.2319 7.68307 15.0761Z"
          fill={color ?? "currentColor"}
        />
      </>
    ),
  },
};

const VuesaxIcon: FC<VuesaxIconProps> = ({
  name,
  size = 24,
  color = "currentColor",
  stroke,
  strokeWidth,
  className,
}) => {
  const icon = icons[name];
  if (!icon) {
    console.warn(`VuesaxIcon "${name}" not found`);
    return null;
  }
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox={icon.viewBox}
      width={size}
      height={size}
      fill={color} // для fill-иконок
      className={className}
    >
      {icon.paths({ color, stroke, strokeWidth })}
    </svg>
  );
};

export default VuesaxIcon;
